{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { jsonToConvex } from \"../../values/index.js\";\nimport { Long } from \"../long.js\";\nimport { logToConsole } from \"../logging.js\";\nexport class RemoteQuerySet {\n  constructor(queryPath) {\n    __publicField(this, \"version\");\n    __publicField(this, \"remoteQuerySet\");\n    __publicField(this, \"queryPath\");\n    this.version = {\n      querySet: 0,\n      ts: Long.fromNumber(0),\n      identity: 0\n    };\n    this.remoteQuerySet = /* @__PURE__ */new Map();\n    this.queryPath = queryPath;\n  }\n  transition(transition) {\n    const start = transition.startVersion;\n    if (this.version.querySet !== start.querySet || this.version.ts.notEquals(start.ts) || this.version.identity !== start.identity) {\n      throw new Error(`Invalid start version: ${start.ts.toString()}:${start.querySet}`);\n    }\n    for (const modification of transition.modifications) {\n      switch (modification.type) {\n        case \"QueryUpdated\":\n          {\n            const queryPath = this.queryPath(modification.queryId);\n            if (queryPath) {\n              for (const line of modification.logLines) {\n                logToConsole(\"info\", \"query\", queryPath, line);\n              }\n            }\n            const value = jsonToConvex(modification.value ?? null);\n            this.remoteQuerySet.set(modification.queryId, {\n              success: true,\n              value,\n              logLines: modification.logLines\n            });\n            break;\n          }\n        case \"QueryFailed\":\n          {\n            const queryPath = this.queryPath(modification.queryId);\n            if (queryPath) {\n              for (const line of modification.logLines) {\n                logToConsole(\"info\", \"query\", queryPath, line);\n              }\n            }\n            const {\n              errorData\n            } = modification;\n            this.remoteQuerySet.set(modification.queryId, {\n              success: false,\n              errorMessage: modification.errorMessage,\n              errorData: errorData !== void 0 ? jsonToConvex(errorData) : void 0,\n              logLines: modification.logLines\n            });\n            break;\n          }\n        case \"QueryRemoved\":\n          {\n            this.remoteQuerySet.delete(modification.queryId);\n            break;\n          }\n        default:\n          {\n            const _ = modification;\n            throw new Error(`Invalid modification ${modification.type}`);\n          }\n      }\n    }\n    this.version = transition.endVersion;\n  }\n  remoteQueryResults() {\n    return this.remoteQuerySet;\n  }\n  timestamp() {\n    return this.version.ts;\n  }\n}","map":{"version":3,"names":["jsonToConvex","Long","logToConsole","RemoteQuerySet","constructor","queryPath","__publicField","version","querySet","ts","fromNumber","identity","remoteQuerySet","Map","transition","start","startVersion","notEquals","Error","toString","modification","modifications","type","queryId","line","logLines","value","set","success","errorData","errorMessage","delete","_","endVersion","remoteQueryResults","timestamp"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/browser/sync/remote_query_set.ts"],"sourcesContent":["import { jsonToConvex } from \"../../values/index.js\";\nimport { Long } from \"../long.js\";\nimport { logToConsole } from \"../logging.js\";\nimport { QueryId, StateVersion, Transition } from \"./protocol.js\";\nimport { FunctionResult } from \"./function_result.js\";\n\n/**\n * A represention of the query results we've received on the current WebSocket\n * connection.\n */\nexport class RemoteQuerySet {\n  private version: StateVersion;\n  private readonly remoteQuerySet: Map<QueryId, FunctionResult>;\n  private readonly queryPath: (queryId: QueryId) => string | null;\n\n  constructor(queryPath: (queryId: QueryId) => string | null) {\n    this.version = { querySet: 0, ts: Long.fromNumber(0), identity: 0 };\n    this.remoteQuerySet = new Map();\n    this.queryPath = queryPath;\n  }\n\n  transition(transition: Transition): void {\n    const start = transition.startVersion;\n    if (\n      this.version.querySet !== start.querySet ||\n      this.version.ts.notEquals(start.ts) ||\n      this.version.identity !== start.identity\n    ) {\n      throw new Error(\n        `Invalid start version: ${start.ts.toString()}:${start.querySet}`,\n      );\n    }\n    for (const modification of transition.modifications) {\n      switch (modification.type) {\n        case \"QueryUpdated\": {\n          const queryPath = this.queryPath(modification.queryId);\n          if (queryPath) {\n            for (const line of modification.logLines) {\n              logToConsole(\"info\", \"query\", queryPath, line);\n            }\n          }\n          const value = jsonToConvex(modification.value ?? null);\n          this.remoteQuerySet.set(modification.queryId, {\n            success: true,\n            value,\n            logLines: modification.logLines,\n          });\n          break;\n        }\n        case \"QueryFailed\": {\n          const queryPath = this.queryPath(modification.queryId);\n          if (queryPath) {\n            for (const line of modification.logLines) {\n              logToConsole(\"info\", \"query\", queryPath, line);\n            }\n          }\n          const { errorData } = modification;\n          this.remoteQuerySet.set(modification.queryId, {\n            success: false,\n            errorMessage: modification.errorMessage,\n            errorData:\n              errorData !== undefined ? jsonToConvex(errorData) : undefined,\n            logLines: modification.logLines,\n          });\n          break;\n        }\n        case \"QueryRemoved\": {\n          this.remoteQuerySet.delete(modification.queryId);\n          break;\n        }\n        default: {\n          // Enforce that the switch-case is exhaustive.\n          const _: never = modification;\n          throw new Error(`Invalid modification ${(modification as any).type}`);\n        }\n      }\n    }\n    this.version = transition.endVersion;\n  }\n\n  remoteQueryResults(): Map<QueryId, FunctionResult> {\n    return this.remoteQuerySet;\n  }\n\n  timestamp(): Long {\n    return this.version.ts;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,YAAA,QAAoB;AAC7B,SAASC,IAAA,QAAY;AACrB,SAASC,YAAA,QAAoB;AAQtB,aAAMC,cAAA,CAAe;EAK1BC,YAAYC,SAAA,EAAgD;IAJ5DC,aAAA,OAAQ;IACRA,aAAA,OAAiB;IACjBA,aAAA,OAAiB;IAGf,KAAKC,OAAA,GAAU;MAAEC,QAAA,EAAU;MAAGC,EAAA,EAAIR,IAAA,CAAKS,UAAA,CAAW,CAAC;MAAGC,QAAA,EAAU;IAAE;IAClE,KAAKC,cAAA,GAAiB,mBAAIC,GAAA,CAAI;IAC9B,KAAKR,SAAA,GAAYA,SAAA;EACnB;EAEAS,WAAWA,UAAA,EAA8B;IACvC,MAAMC,KAAA,GAAQD,UAAA,CAAWE,YAAA;IACzB,IACE,KAAKT,OAAA,CAAQC,QAAA,KAAaO,KAAA,CAAMP,QAAA,IAChC,KAAKD,OAAA,CAAQE,EAAA,CAAGQ,SAAA,CAAUF,KAAA,CAAMN,EAAE,KAClC,KAAKF,OAAA,CAAQI,QAAA,KAAaI,KAAA,CAAMJ,QAAA,EAChC;MACA,MAAM,IAAIO,KAAA,CACR,0BAA0BH,KAAA,CAAMN,EAAA,CAAGU,QAAA,CAAS,KAAKJ,KAAA,CAAMP,QAAA,EACzD;IACF;IACA,WAAWY,YAAA,IAAgBN,UAAA,CAAWO,aAAA,EAAe;MACnD,QAAQD,YAAA,CAAaE,IAAA;QACnB,KAAK;UAAgB;YACnB,MAAMjB,SAAA,GAAY,KAAKA,SAAA,CAAUe,YAAA,CAAaG,OAAO;YACrD,IAAIlB,SAAA,EAAW;cACb,WAAWmB,IAAA,IAAQJ,YAAA,CAAaK,QAAA,EAAU;gBACxCvB,YAAA,CAAa,QAAQ,SAASG,SAAA,EAAWmB,IAAI;cAC/C;YACF;YACA,MAAME,KAAA,GAAQ1B,YAAA,CAAaoB,YAAA,CAAaM,KAAA,IAAS,IAAI;YACrD,KAAKd,cAAA,CAAee,GAAA,CAAIP,YAAA,CAAaG,OAAA,EAAS;cAC5CK,OAAA,EAAS;cACTF,KAAA;cACAD,QAAA,EAAUL,YAAA,CAAaK;YACzB,CAAC;YACD;UACF;QACA,KAAK;UAAe;YAClB,MAAMpB,SAAA,GAAY,KAAKA,SAAA,CAAUe,YAAA,CAAaG,OAAO;YACrD,IAAIlB,SAAA,EAAW;cACb,WAAWmB,IAAA,IAAQJ,YAAA,CAAaK,QAAA,EAAU;gBACxCvB,YAAA,CAAa,QAAQ,SAASG,SAAA,EAAWmB,IAAI;cAC/C;YACF;YACA,MAAM;cAAEK;YAAU,IAAIT,YAAA;YACtB,KAAKR,cAAA,CAAee,GAAA,CAAIP,YAAA,CAAaG,OAAA,EAAS;cAC5CK,OAAA,EAAS;cACTE,YAAA,EAAcV,YAAA,CAAaU,YAAA;cAC3BD,SAAA,EACEA,SAAA,KAAc,SAAY7B,YAAA,CAAa6B,SAAS,IAAI;cACtDJ,QAAA,EAAUL,YAAA,CAAaK;YACzB,CAAC;YACD;UACF;QACA,KAAK;UAAgB;YACnB,KAAKb,cAAA,CAAemB,MAAA,CAAOX,YAAA,CAAaG,OAAO;YAC/C;UACF;QACA;UAAS;YAEP,MAAMS,CAAA,GAAWZ,YAAA;YACjB,MAAM,IAAIF,KAAA,CAAM,wBAAyBE,YAAA,CAAqBE,IAAA,EAAM;UACtE;MACF;IACF;IACA,KAAKf,OAAA,GAAUO,UAAA,CAAWmB,UAAA;EAC5B;EAEAC,mBAAA,EAAmD;IACjD,OAAO,KAAKtB,cAAA;EACd;EAEAuB,UAAA,EAAkB;IAChB,OAAO,KAAK5B,OAAA,CAAQE,EAAA;EACtB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}