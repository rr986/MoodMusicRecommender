{"ast":null,"code":"\"use strict\";\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { ConvexProvider } from \"./client.js\";\nconst ConvexAuthContext = createContext(void 0);\nexport function useConvexAuth() {\n  const authContext = useContext(ConvexAuthContext);\n  if (authContext === void 0) {\n    throw new Error(\"Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` or `ConvexProviderWithAuth0`) as an ancestor component. This component may be missing, or you might have two instances of the `convex/react` module loaded in your project.\");\n  }\n  return authContext;\n}\nexport function ConvexProviderWithAuth(_ref) {\n  let {\n    children,\n    client,\n    useAuth\n  } = _ref;\n  const {\n    isLoading,\n    isAuthenticated,\n    fetchAccessToken\n  } = useAuth();\n  const [isConvexAuthenticated, setIsConvexAuthenticated] = useState(null);\n  if (isLoading && isConvexAuthenticated !== null) {\n    setIsConvexAuthenticated(null);\n  }\n  if (!isLoading && !isAuthenticated && isConvexAuthenticated !== false) {\n    setIsConvexAuthenticated(false);\n  }\n  return /* @__PURE__ */React.createElement(ConvexAuthContext.Provider, {\n    value: {\n      isLoading: isConvexAuthenticated === null,\n      isAuthenticated: isAuthenticated && (isConvexAuthenticated ?? false)\n    }\n  }, /* @__PURE__ */React.createElement(ConvexAuthStateFirstEffect, {\n    isAuthenticated,\n    fetchAccessToken,\n    isLoading,\n    client,\n    setIsConvexAuthenticated\n  }), /* @__PURE__ */React.createElement(ConvexProvider, {\n    client\n  }, children), /* @__PURE__ */React.createElement(ConvexAuthStateLastEffect, {\n    isAuthenticated,\n    fetchAccessToken,\n    isLoading,\n    client\n  }));\n}\nfunction ConvexAuthStateFirstEffect(_ref2) {\n  let {\n    isAuthenticated,\n    fetchAccessToken,\n    isLoading,\n    client,\n    setIsConvexAuthenticated\n  } = _ref2;\n  useEffect(() => {\n    let isThisEffectRelevant = true;\n    if (isAuthenticated) {\n      client.setAuth(fetchAccessToken, isAuthenticated2 => {\n        if (isThisEffectRelevant) {\n          setIsConvexAuthenticated(isAuthenticated2);\n        }\n      });\n      return () => {\n        isThisEffectRelevant = false;\n        setIsConvexAuthenticated(isConvexAuthenticated => isConvexAuthenticated ? false : null);\n      };\n    }\n  }, [isAuthenticated, fetchAccessToken, isLoading, client, setIsConvexAuthenticated]);\n  return null;\n}\nfunction ConvexAuthStateLastEffect(_ref3) {\n  let {\n    isAuthenticated,\n    fetchAccessToken,\n    isLoading,\n    client\n  } = _ref3;\n  useEffect(() => {\n    if (isAuthenticated) {\n      return () => {\n        client.clearAuth();\n      };\n    }\n  }, [isAuthenticated, fetchAccessToken, isLoading, client]);\n  return null;\n}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","ConvexProvider","ConvexAuthContext","useConvexAuth","authContext","Error","ConvexProviderWithAuth","_ref","children","client","useAuth","isLoading","isAuthenticated","fetchAccessToken","isConvexAuthenticated","setIsConvexAuthenticated","createElement","Provider","value","ConvexAuthStateFirstEffect","ConvexAuthStateLastEffect","_ref2","isThisEffectRelevant","setAuth","isAuthenticated2","_ref3","clearAuth"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/react/ConvexAuthState.tsx"],"sourcesContent":["import React, {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { AuthTokenFetcher } from \"../browser/sync/client.js\";\nimport { ConvexProvider } from \"./client.js\";\n\n// Until we can import from our own entry points (requires TypeScript 4.7),\n// just describe the interface enough to help users pass the right type.\ntype IConvexReactClient = {\n  setAuth(\n    fetchToken: AuthTokenFetcher,\n    onChange: (isAuthenticated: boolean) => void,\n  ): void;\n  clearAuth(): void;\n};\n\n/**\n * Type representing the state of an auth integration with Convex.\n *\n * @public\n */\nexport type ConvexAuthState = {\n  isLoading: boolean;\n  isAuthenticated: boolean;\n};\n\nconst ConvexAuthContext = createContext<ConvexAuthState>(undefined as any);\n\n/**\n * Get the {@link ConvexAuthState} within a React component.\n *\n * This relies on a Convex auth integration provider being above in the React\n * component tree.\n *\n * @returns The current {@link ConvexAuthState}.\n *\n * @public\n */\nexport function useConvexAuth(): {\n  isLoading: boolean;\n  isAuthenticated: boolean;\n} {\n  const authContext = useContext(ConvexAuthContext);\n  if (authContext === undefined) {\n    throw new Error(\n      \"Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` \" +\n        \"or `ConvexProviderWithAuth0`) \" +\n        \"as an ancestor component. This component may be missing, or you \" +\n        \"might have two instances of the `convex/react` module loaded in your \" +\n        \"project.\",\n    );\n  }\n  return authContext;\n}\n\n/**\n * A replacement for {@link ConvexProvider} which additionally provides\n * {@link ConvexAuthState} to descendants of this component.\n *\n * Use this to integrate any auth provider with Convex. The `useAuth` prop\n * should be a React hook that returns the provider's authentication state\n * and a function to fetch a JWT access token.\n *\n * See [Custom Auth Integration](https://docs.convex.dev/auth/advanced/custom-auth) for more information.\n *\n * @public\n */\nexport function ConvexProviderWithAuth({\n  children,\n  client,\n  useAuth,\n}: {\n  children?: ReactNode;\n  client: IConvexReactClient;\n  useAuth: () => {\n    isLoading: boolean;\n    isAuthenticated: boolean;\n    fetchAccessToken: (args: {\n      forceRefreshToken: boolean;\n    }) => Promise<string | null>;\n  };\n}) {\n  const { isLoading, isAuthenticated, fetchAccessToken } = useAuth();\n  const [isConvexAuthenticated, setIsConvexAuthenticated] = useState<\n    boolean | null\n  >(null);\n\n  // If the useAuth went back to the loading state (which is unusual but possible)\n  // reset the Convex auth state to null so that we can correctly\n  // transition the state from \"loading\" to \"authenticated\"\n  // without going through \"unauthenticated\".\n  if (isLoading && isConvexAuthenticated !== null) {\n    setIsConvexAuthenticated(null);\n  }\n\n  if (!isLoading && !isAuthenticated && isConvexAuthenticated !== false) {\n    setIsConvexAuthenticated(false);\n  }\n\n  return (\n    <ConvexAuthContext.Provider\n      value={{\n        isLoading: isConvexAuthenticated === null,\n        isAuthenticated: isAuthenticated && (isConvexAuthenticated ?? false),\n      }}\n    >\n      <ConvexAuthStateFirstEffect\n        isAuthenticated={isAuthenticated}\n        fetchAccessToken={fetchAccessToken}\n        isLoading={isLoading}\n        client={client}\n        setIsConvexAuthenticated={setIsConvexAuthenticated}\n      />\n      <ConvexProvider client={client as any}>{children}</ConvexProvider>\n      <ConvexAuthStateLastEffect\n        isAuthenticated={isAuthenticated}\n        fetchAccessToken={fetchAccessToken}\n        isLoading={isLoading}\n        client={client}\n      />\n    </ConvexAuthContext.Provider>\n  );\n}\n\n// First child ensures we `setAuth` before\n// other child components subscribe to queries via `useEffect`.\nfunction ConvexAuthStateFirstEffect({\n  isAuthenticated,\n  fetchAccessToken,\n  isLoading,\n  client,\n  setIsConvexAuthenticated,\n}: {\n  isAuthenticated: boolean;\n  fetchAccessToken: (args: {\n    forceRefreshToken: boolean;\n  }) => Promise<string | null>;\n  isLoading: boolean;\n  client: IConvexReactClient;\n  setIsConvexAuthenticated: React.Dispatch<\n    React.SetStateAction<boolean | null>\n  >;\n}) {\n  useEffect(() => {\n    let isThisEffectRelevant = true;\n    if (isAuthenticated) {\n      client.setAuth(fetchAccessToken, (isAuthenticated) => {\n        if (isThisEffectRelevant) {\n          setIsConvexAuthenticated(isAuthenticated);\n        }\n      });\n      return () => {\n        isThisEffectRelevant = false;\n\n        // If we haven't finished fetching the token by now\n        // we shouldn't transition to a loaded state\n        setIsConvexAuthenticated((isConvexAuthenticated) =>\n          isConvexAuthenticated ? false : null,\n        );\n      };\n    }\n  }, [\n    isAuthenticated,\n    fetchAccessToken,\n    isLoading,\n    client,\n    setIsConvexAuthenticated,\n  ]);\n  return null;\n}\n\n// Last child ensures we `clearAuth` last,\n// so that queries from unmounted sibling components\n// unsubscribe first and don't rerun without auth on the server\nfunction ConvexAuthStateLastEffect({\n  isAuthenticated,\n  fetchAccessToken,\n  isLoading,\n  client,\n}: {\n  isAuthenticated: boolean;\n  fetchAccessToken: (args: {\n    forceRefreshToken: boolean;\n  }) => Promise<string | null>;\n  isLoading: boolean;\n  client: IConvexReactClient;\n}) {\n  useEffect(() => {\n    if (isAuthenticated) {\n      return () => {\n        client.clearAuth();\n      };\n    }\n  }, [isAuthenticated, fetchAccessToken, isLoading, client]);\n  return null;\n}\n"],"mappings":";;AAAA,OAAOA,KAAA,IACLC,aAAA,EAEAC,UAAA,EACAC,SAAA,EACAC,QAAA,QACK;AAEP,SAASC,cAAA,QAAsB;AAsB/B,MAAMC,iBAAA,GAAoBL,aAAA,CAA+B,MAAgB;AAYlE,gBAASM,cAAA,EAGd;EACA,MAAMC,WAAA,GAAcN,UAAA,CAAWI,iBAAiB;EAChD,IAAIE,WAAA,KAAgB,QAAW;IAC7B,MAAM,IAAIC,KAAA,CACR,mPAKF;EACF;EACA,OAAOD,WAAA;AACT;AAcO,gBAASE,uBAAAC,IAAA,EAcb;EAAA,IAdoC;IACrCC,QAAA;IACAC,MAAA;IACAC;EACF,IAAAH,IAAA;EAWE,MAAM;IAAEI,SAAA;IAAWC,eAAA;IAAiBC;EAAiB,IAAIH,OAAA,CAAQ;EACjE,MAAM,CAACI,qBAAA,EAAuBC,wBAAwB,IAAIf,QAAA,CAExD,IAAI;EAMN,IAAIW,SAAA,IAAaG,qBAAA,KAA0B,MAAM;IAC/CC,wBAAA,CAAyB,IAAI;EAC/B;EAEA,IAAI,CAACJ,SAAA,IAAa,CAACC,eAAA,IAAmBE,qBAAA,KAA0B,OAAO;IACrEC,wBAAA,CAAyB,KAAK;EAChC;EAEA,OACE,eAAAnB,KAAA,CAAAoB,aAAA,CAACd,iBAAA,CAAkBe,QAAA,EAAlB;IACCC,KAAA,EAAO;MACLP,SAAA,EAAWG,qBAAA,KAA0B;MACrCF,eAAA,EAAiBA,eAAA,KAAoBE,qBAAA,IAAyB;IAChE;EAAA,GAEA,eAAAlB,KAAA,CAAAoB,aAAA,CAACG,0BAAA;IACCP,eAAA;IACAC,gBAAA;IACAF,SAAA;IACAF,MAAA;IACAM;EAAA,CACF,GACA,eAAAnB,KAAA,CAAAoB,aAAA,CAACf,cAAA;IAAeQ;EAAA,GAAwBD,QAAS,GACjD,eAAAZ,KAAA,CAAAoB,aAAA,CAACI,yBAAA;IACCR,eAAA;IACAC,gBAAA;IACAF,SAAA;IACAF;EAAA,CACF,CACF;AAEJ;AAIA,SAASU,2BAAAE,KAAA,EAgBN;EAAA,IAhBiC;IAClCT,eAAA;IACAC,gBAAA;IACAF,SAAA;IACAF,MAAA;IACAM;EACF,IAAAM,KAAA;EAWEtB,SAAA,CAAU,MAAM;IACd,IAAIuB,oBAAA,GAAuB;IAC3B,IAAIV,eAAA,EAAiB;MACnBH,MAAA,CAAOc,OAAA,CAAQV,gBAAA,EAAmBW,gBAAA,IAAoB;QACpD,IAAIF,oBAAA,EAAsB;UACxBP,wBAAA,CAAyBS,gBAAe;QAC1C;MACF,CAAC;MACD,OAAO,MAAM;QACXF,oBAAA,GAAuB;QAIvBP,wBAAA,CAA0BD,qBAAA,IACxBA,qBAAA,GAAwB,QAAQ,IAClC;MACF;IACF;EACF,GAAG,CACDF,eAAA,EACAC,gBAAA,EACAF,SAAA,EACAF,MAAA,EACAM,wBAAA,CACD;EACD,OAAO;AACT;AAKA,SAASK,0BAAAK,KAAA,EAYN;EAAA,IAZgC;IACjCb,eAAA;IACAC,gBAAA;IACAF,SAAA;IACAF;EACF,IAAAgB,KAAA;EAQE1B,SAAA,CAAU,MAAM;IACd,IAAIa,eAAA,EAAiB;MACnB,OAAO,MAAM;QACXH,MAAA,CAAOiB,SAAA,CAAU;MACnB;IACF;EACF,GAAG,CAACd,eAAA,EAAiBC,gBAAA,EAAkBF,SAAA,EAAWF,MAAM,CAAC;EACzD,OAAO;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}