{"ast":null,"code":"\"use strict\";\n\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\nfunction prefix_for_source(source) {\n  switch (source) {\n    case \"query\":\n      return \"Q\";\n    case \"mutation\":\n      return \"M\";\n    case \"action\":\n      return \"A\";\n    case \"any\":\n      return \"?\";\n  }\n}\nexport function logToConsole(type, source, udfPath, message) {\n  const prefix = prefix_for_source(source);\n  if (typeof message === \"object\") {\n    message = `ConvexError ${JSON.stringify(message.errorData, null, 2)}`;\n  }\n  if (type === \"info\") {\n    const match = message.match(/^\\[.*?\\] /);\n    if (match === null) {\n      console.error(`[CONVEX ${prefix}(${udfPath})] Could not parse console.log`);\n      return;\n    }\n    const level = message.slice(1, match[0].length - 2);\n    const args = message.slice(match[0].length);\n    console.log(`%c[CONVEX ${prefix}(${udfPath})] [${level}]`, INFO_COLOR, args);\n  } else {\n    console.error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n  }\n}\nexport function logFatalError(message) {\n  const errorMessage = `[CONVEX FATAL ERROR] ${message}`;\n  console.error(errorMessage);\n  return new Error(errorMessage);\n}\nexport function createHybridErrorStacktrace(source, udfPath, result) {\n  const prefix = prefix_for_source(source);\n  return `[CONVEX ${prefix}(${udfPath})] ${result.errorMessage}\n  Called by client`;\n}\nexport function forwardData(result, error) {\n  error.data = result.errorData;\n  return error;\n}","map":{"version":3,"names":["INFO_COLOR","prefix_for_source","source","logToConsole","type","udfPath","message","prefix","JSON","stringify","errorData","match","console","error","level","slice","length","args","log","logFatalError","errorMessage","Error","createHybridErrorStacktrace","result","forwardData","data"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/browser/logging.ts"],"sourcesContent":["import { ConvexError, Value } from \"../values/index.js\";\nimport { FunctionFailure } from \"./sync/function_result.js\";\n\n// This is blue #9 from https://www.radix-ui.com/docs/colors/palette-composition/the-scales\n// It must look good in both light and dark mode.\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\n\nexport type UdfType = \"query\" | \"mutation\" | \"action\" | \"any\";\n\nfunction prefix_for_source(source: UdfType) {\n  switch (source) {\n    case \"query\":\n      return \"Q\";\n    case \"mutation\":\n      return \"M\";\n    case \"action\":\n      return \"A\";\n    case \"any\":\n      return \"?\";\n  }\n}\n\nexport function logToConsole(\n  type: \"info\" | \"error\",\n  source: UdfType,\n  udfPath: string,\n  message: string | { errorData: Value },\n) {\n  const prefix = prefix_for_source(source);\n\n  if (typeof message === \"object\") {\n    message = `ConvexError ${JSON.stringify(message.errorData, null, 2)}`;\n  }\n  if (type === \"info\") {\n    const match = message.match(/^\\[.*?\\] /);\n    if (match === null) {\n      console.error(\n        `[CONVEX ${prefix}(${udfPath})] Could not parse console.log`,\n      );\n      return;\n    }\n    const level = message.slice(1, match[0].length - 2);\n    const args = message.slice(match[0].length);\n\n    console.log(\n      `%c[CONVEX ${prefix}(${udfPath})] [${level}]`,\n      INFO_COLOR,\n      args,\n    );\n  } else {\n    console.error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n  }\n}\n\nexport function logFatalError(message: string): Error {\n  const errorMessage = `[CONVEX FATAL ERROR] ${message}`;\n  console.error(errorMessage);\n  return new Error(errorMessage);\n}\n\nexport function createHybridErrorStacktrace(\n  source: UdfType,\n  udfPath: string,\n  result: FunctionFailure,\n): string {\n  const prefix = prefix_for_source(source);\n  return `[CONVEX ${prefix}(${udfPath})] ${result.errorMessage}\\n  Called by client`;\n}\n\nexport function forwardData(\n  result: FunctionFailure,\n  error: ConvexError<string>,\n) {\n  (error as ConvexError<any>).data = result.errorData;\n  return error;\n}\n"],"mappings":";;AAKA,MAAMA,UAAA,GAAa;AAInB,SAASC,kBAAkBC,MAAA,EAAiB;EAC1C,QAAQA,MAAA;IACN,KAAK;MACH,OAAO;IACT,KAAK;MACH,OAAO;IACT,KAAK;MACH,OAAO;IACT,KAAK;MACH,OAAO;EACX;AACF;AAEO,gBAASC,aACdC,IAAA,EACAF,MAAA,EACAG,OAAA,EACAC,OAAA,EACA;EACA,MAAMC,MAAA,GAASN,iBAAA,CAAkBC,MAAM;EAEvC,IAAI,OAAOI,OAAA,KAAY,UAAU;IAC/BA,OAAA,GAAU,eAAeE,IAAA,CAAKC,SAAA,CAAUH,OAAA,CAAQI,SAAA,EAAW,MAAM,CAAC;EACpE;EACA,IAAIN,IAAA,KAAS,QAAQ;IACnB,MAAMO,KAAA,GAAQL,OAAA,CAAQK,KAAA,CAAM,WAAW;IACvC,IAAIA,KAAA,KAAU,MAAM;MAClBC,OAAA,CAAQC,KAAA,CACN,WAAWN,MAAA,IAAUF,OAAA,gCACvB;MACA;IACF;IACA,MAAMS,KAAA,GAAQR,OAAA,CAAQS,KAAA,CAAM,GAAGJ,KAAA,CAAM,CAAC,EAAEK,MAAA,GAAS,CAAC;IAClD,MAAMC,IAAA,GAAOX,OAAA,CAAQS,KAAA,CAAMJ,KAAA,CAAM,CAAC,EAAEK,MAAM;IAE1CJ,OAAA,CAAQM,GAAA,CACN,aAAaX,MAAA,IAAUF,OAAA,OAAcS,KAAA,KACrCd,UAAA,EACAiB,IACF;EACF,OAAO;IACLL,OAAA,CAAQC,KAAA,CAAM,WAAWN,MAAA,IAAUF,OAAA,MAAaC,OAAA,EAAS;EAC3D;AACF;AAEO,gBAASa,cAAcb,OAAA,EAAwB;EACpD,MAAMc,YAAA,GAAe,wBAAwBd,OAAA;EAC7CM,OAAA,CAAQC,KAAA,CAAMO,YAAY;EAC1B,OAAO,IAAIC,KAAA,CAAMD,YAAY;AAC/B;AAEO,gBAASE,4BACdpB,MAAA,EACAG,OAAA,EACAkB,MAAA,EACQ;EACR,MAAMhB,MAAA,GAASN,iBAAA,CAAkBC,MAAM;EACvC,OAAO,WAAWK,MAAA,IAAUF,OAAA,MAAakB,MAAA,CAAOH,YAAA;AAAA;AAClD;AAEO,gBAASI,YACdD,MAAA,EACAV,KAAA,EACA;EACCA,KAAA,CAA2BY,IAAA,GAAOF,MAAA,CAAOb,SAAA;EAC1C,OAAOG,KAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}