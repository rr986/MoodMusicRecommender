{"ast":null,"code":"\"use strict\";\n\nimport { useMemo } from \"react\";\nimport { useQuery } from \"../react/client.js\";\nimport { makeFunctionReference } from \"../server/api.js\";\nimport { jsonToConvex } from \"../values/index.js\";\nexport function usePreloadedQuery(preloadedQuery) {\n  const args = useMemo(() => jsonToConvex(preloadedQuery._argsJSON), [preloadedQuery._argsJSON]);\n  const preloadedResult = useMemo(() => jsonToConvex(preloadedQuery._valueJSON), [preloadedQuery._valueJSON]);\n  const result = useQuery(makeFunctionReference(preloadedQuery._name), args);\n  return result === void 0 ? preloadedResult : result;\n}","map":{"version":3,"names":["useMemo","useQuery","makeFunctionReference","jsonToConvex","usePreloadedQuery","preloadedQuery","args","_argsJSON","preloadedResult","_valueJSON","result","_name"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/react/hydration.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport { useQuery } from \"../react/client.js\";\nimport { FunctionReference, makeFunctionReference } from \"../server/api.js\";\nimport { jsonToConvex } from \"../values/index.js\";\n\n/**\n * The preloaded query payload, which should be passed to a client component\n * and passed to {@link usePreloadedQuery}.\n *\n * @public\n */\nexport type Preloaded<Query extends FunctionReference<\"query\">> = {\n  __type: Query;\n  _name: string;\n  _argsJSON: string;\n  _valueJSON: string;\n};\n\n/**\n * Load a reactive query within a React component using a `Preloaded` payload\n * from a Server Component returned by {@link nextjs.preloadQuery}.\n *\n * This React hook contains internal state that will cause a rerender\n * whenever the query result changes.\n *\n * Throws an error if not used under {@link ConvexProvider}.\n *\n * @param preloadedQuery - The `Preloaded` query payload from a Server Component.\n * @returns the result of the query. Initially returns the result fetched\n * by the Server Component. Subsequently returns the result fetched by the client.\n *\n * @public\n */\nexport function usePreloadedQuery<Query extends FunctionReference<\"query\">>(\n  preloadedQuery: Preloaded<Query>,\n): Query[\"_returnType\"] {\n  const args = useMemo(\n    () => jsonToConvex(preloadedQuery._argsJSON),\n    [preloadedQuery._argsJSON],\n  ) as Query[\"_args\"];\n  const preloadedResult = useMemo(\n    () => jsonToConvex(preloadedQuery._valueJSON),\n    [preloadedQuery._valueJSON],\n  );\n  const result = useQuery(\n    makeFunctionReference(preloadedQuery._name) as Query,\n    args,\n  );\n  return result === undefined ? preloadedResult : result;\n}\n"],"mappings":";;AAAA,SAASA,OAAA,QAAe;AACxB,SAASC,QAAA,QAAgB;AACzB,SAA4BC,qBAAA,QAA6B;AACzD,SAASC,YAAA,QAAoB;AA8BtB,gBAASC,kBACdC,cAAA,EACsB;EACtB,MAAMC,IAAA,GAAON,OAAA,CACX,MAAMG,YAAA,CAAaE,cAAA,CAAeE,SAAS,GAC3C,CAACF,cAAA,CAAeE,SAAS,CAC3B;EACA,MAAMC,eAAA,GAAkBR,OAAA,CACtB,MAAMG,YAAA,CAAaE,cAAA,CAAeI,UAAU,GAC5C,CAACJ,cAAA,CAAeI,UAAU,CAC5B;EACA,MAAMC,MAAA,GAAST,QAAA,CACbC,qBAAA,CAAsBG,cAAA,CAAeM,KAAK,GAC1CL,IACF;EACA,OAAOI,MAAA,KAAW,SAAYF,eAAA,GAAkBE,MAAA;AAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}