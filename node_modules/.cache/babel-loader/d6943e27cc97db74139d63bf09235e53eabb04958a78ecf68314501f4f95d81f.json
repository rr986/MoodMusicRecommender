{"ast":null,"code":"\"use strict\";\n\nimport { convexToJson } from \"../../values/index.js\";\nexport function canonicalizeUdfPath(udfPath) {\n  const pieces = udfPath.split(\":\");\n  let moduleName;\n  let functionName;\n  if (pieces.length === 1) {\n    moduleName = pieces[0];\n    functionName = \"default\";\n  } else {\n    moduleName = pieces.slice(0, pieces.length - 1).join(\":\");\n    functionName = pieces[pieces.length - 1];\n  }\n  if (moduleName.endsWith(\".js\")) {\n    moduleName = moduleName.slice(0, -3);\n  }\n  return `${moduleName}:${functionName}`;\n}\nexport function serializePathAndArgs(udfPath, args) {\n  return JSON.stringify({\n    udfPath: canonicalizeUdfPath(udfPath),\n    args: convexToJson(args)\n  });\n}","map":{"version":3,"names":["convexToJson","canonicalizeUdfPath","udfPath","pieces","split","moduleName","functionName","length","slice","join","endsWith","serializePathAndArgs","args","JSON","stringify"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/browser/sync/udf_path_utils.ts"],"sourcesContent":["import { convexToJson, Value } from \"../../values/index.js\";\n\nexport function canonicalizeUdfPath(udfPath: string): string {\n  const pieces = udfPath.split(\":\");\n  let moduleName: string;\n  let functionName: string;\n  if (pieces.length === 1) {\n    moduleName = pieces[0];\n    functionName = \"default\";\n  } else {\n    moduleName = pieces.slice(0, pieces.length - 1).join(\":\");\n    functionName = pieces[pieces.length - 1];\n  }\n  if (moduleName.endsWith(\".js\")) {\n    moduleName = moduleName.slice(0, -3);\n  }\n  return `${moduleName}:${functionName}`;\n}\n\n/**\n * A string representing the name and arguments of a query.\n *\n * This is used by the {@link BaseConvexClient}.\n *\n * @public\n */\nexport type QueryToken = string;\n\nexport function serializePathAndArgs(\n  udfPath: string,\n  args: Record<string, Value>,\n): QueryToken {\n  return JSON.stringify({\n    udfPath: canonicalizeUdfPath(udfPath),\n    args: convexToJson(args),\n  });\n}\n"],"mappings":";;AAAA,SAASA,YAAA,QAA2B;AAE7B,gBAASC,oBAAoBC,OAAA,EAAyB;EAC3D,MAAMC,MAAA,GAASD,OAAA,CAAQE,KAAA,CAAM,GAAG;EAChC,IAAIC,UAAA;EACJ,IAAIC,YAAA;EACJ,IAAIH,MAAA,CAAOI,MAAA,KAAW,GAAG;IACvBF,UAAA,GAAaF,MAAA,CAAO,CAAC;IACrBG,YAAA,GAAe;EACjB,OAAO;IACLD,UAAA,GAAaF,MAAA,CAAOK,KAAA,CAAM,GAAGL,MAAA,CAAOI,MAAA,GAAS,CAAC,EAAEE,IAAA,CAAK,GAAG;IACxDH,YAAA,GAAeH,MAAA,CAAOA,MAAA,CAAOI,MAAA,GAAS,CAAC;EACzC;EACA,IAAIF,UAAA,CAAWK,QAAA,CAAS,KAAK,GAAG;IAC9BL,UAAA,GAAaA,UAAA,CAAWG,KAAA,CAAM,GAAG,EAAE;EACrC;EACA,OAAO,GAAGH,UAAA,IAAcC,YAAA;AAC1B;AAWO,gBAASK,qBACdT,OAAA,EACAU,IAAA,EACY;EACZ,OAAOC,IAAA,CAAKC,SAAA,CAAU;IACpBZ,OAAA,EAASD,mBAAA,CAAoBC,OAAO;IACpCU,IAAA,EAAMZ,YAAA,CAAaY,IAAI;EACzB,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}