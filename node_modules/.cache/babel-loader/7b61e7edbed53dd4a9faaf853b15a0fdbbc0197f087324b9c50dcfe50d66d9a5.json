{"ast":null,"code":"\"use strict\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useConvex } from \"./client.js\";\nimport { QueriesObserver } from \"./queries_observer.js\";\nimport { useSubscription } from \"./use_subscription.js\";\nexport function useQueries(queries) {\n  const convex = useConvex();\n  if (convex === void 0) {\n    throw new Error(\"Could not find Convex client! `useQuery` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n  }\n  const createWatch = useMemo(() => {\n    return (query, args, journal) => {\n      return convex.watchQuery(query, args, {\n        journal\n      });\n    };\n  }, [convex]);\n  return useQueriesHelper(queries, createWatch);\n}\nexport function useQueriesHelper(queries, createWatch) {\n  const [observer] = useState(() => new QueriesObserver(createWatch));\n  if (observer.createWatch !== createWatch) {\n    observer.setCreateWatch(createWatch);\n  }\n  useEffect(() => () => observer.destroy(), [observer]);\n  const subscription = useMemo(() => ({\n    getCurrentValue: () => {\n      return observer.getLocalResults(queries);\n    },\n    subscribe: callback => {\n      observer.setQueries(queries);\n      return observer.subscribe(callback);\n    }\n  }), [observer, queries]);\n  return useSubscription(subscription);\n}","map":{"version":3,"names":["useEffect","useMemo","useState","useConvex","QueriesObserver","useSubscription","useQueries","queries","convex","Error","createWatch","query","args","journal","watchQuery","useQueriesHelper","observer","setCreateWatch","destroy","subscription","getCurrentValue","getLocalResults","subscribe","callback","setQueries"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/react/use_queries.ts"],"sourcesContent":["import { Value } from \"../values/index.js\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useConvex } from \"./client.js\";\nimport { CreateWatch, QueriesObserver } from \"./queries_observer.js\";\nimport { useSubscription } from \"./use_subscription.js\";\nimport { QueryJournal } from \"../browser/index.js\";\nimport { FunctionReference } from \"../server/api.js\";\n\n/**\n * Load a variable number of reactive Convex queries.\n *\n * `useQueries` is similar to {@link useQuery} but it allows\n * loading multiple queries which can be useful for loading a dynamic number\n * of queries without violating the rules of React hooks.\n *\n * This hook accepts an object whose keys are identifiers for each query and the\n * values are objects of `{ query: FunctionReference, args: Record<string, Value> }`. The\n * `query` is a FunctionReference for the Convex query function to load, and the `args` are\n * the arguments to that function.\n *\n * The hook returns an object that maps each identifier to the result of the query,\n * `undefined` if the query is still loading, or an instance of `Error` if the query\n * threw an exception.\n *\n * For example if you loaded a query like:\n * ```typescript\n * const results = useQueries({\n *   messagesInGeneral: {\n *     query: \"listMessages\",\n *     args: { channel: \"#general\" }\n *   }\n * });\n * ```\n * then the result would look like:\n * ```typescript\n * {\n *   messagesInGeneral: [{\n *     channel: \"#general\",\n *     body: \"hello\"\n *     _id: ...,\n *     _creationTime: ...\n *   }]\n * }\n * ```\n *\n * This React hook contains internal state that will cause a rerender\n * whenever any of the query results change.\n *\n * Throws an error if not used under {@link ConvexProvider}.\n *\n * @param queries - An object mapping identifiers to objects of\n * `{query: string, args: Record<string, Value> }` describing which query\n * functions to fetch.\n * @returns An object with the same keys as the input. The values are the result\n * of the query function, `undefined` if it's still loading, or an `Error` if\n * it threw an exception.\n *\n * @public\n */\nexport function useQueries(\n  queries: RequestForQueries,\n): Record<string, any | undefined | Error> {\n  const convex = useConvex();\n  if (convex === undefined) {\n    // Error message includes `useQuery` because this hook is called by `useQuery`\n    // more often than it's called directly.\n    throw new Error(\n      \"Could not find Convex client! `useQuery` must be used in the React component \" +\n        \"tree under `ConvexProvider`. Did you forget it? \" +\n        \"See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\",\n    );\n  }\n  const createWatch = useMemo(() => {\n    return (\n      query: FunctionReference<\"query\">,\n      args: Record<string, Value>,\n      journal?: QueryJournal,\n    ) => {\n      return convex.watchQuery(query, args, { journal });\n    };\n  }, [convex]);\n  return useQueriesHelper(queries, createWatch);\n}\n\n/**\n * Internal version of `useQueries` that is exported for testing.\n */\nexport function useQueriesHelper(\n  queries: RequestForQueries,\n  createWatch: CreateWatch,\n): Record<string, any | undefined | Error> {\n  const [observer] = useState(() => new QueriesObserver(createWatch));\n\n  if (observer.createWatch !== createWatch) {\n    observer.setCreateWatch(createWatch);\n  }\n\n  // Unsubscribe from all queries on unmount.\n  useEffect(() => () => observer.destroy(), [observer]);\n\n  const subscription = useMemo(\n    () => ({\n      getCurrentValue: () => {\n        return observer.getLocalResults(queries);\n      },\n      subscribe: (callback: () => void) => {\n        observer.setQueries(queries);\n        return observer.subscribe(callback);\n      },\n    }),\n    [observer, queries],\n  );\n\n  return useSubscription(subscription);\n}\n\n/**\n * An object representing a request to load multiple queries.\n *\n * The keys of this object are identifiers and the values are objects containing\n * the query function and the arguments to pass to it.\n *\n * This is used as an argument to {@link useQueries}.\n * @public\n */\nexport type RequestForQueries = Record<\n  string,\n  {\n    query: FunctionReference<\"query\">;\n    args: Record<string, Value>;\n  }\n>;\n"],"mappings":";;AACA,SAASA,SAAA,EAAWC,OAAA,EAASC,QAAA,QAAgB;AAC7C,SAASC,SAAA,QAAiB;AAC1B,SAAsBC,eAAA,QAAuB;AAC7C,SAASC,eAAA,QAAuB;AAuDzB,gBAASC,WACdC,OAAA,EACyC;EACzC,MAAMC,MAAA,GAASL,SAAA,CAAU;EACzB,IAAIK,MAAA,KAAW,QAAW;IAGxB,MAAM,IAAIC,KAAA,CACR,sMAGF;EACF;EACA,MAAMC,WAAA,GAAcT,OAAA,CAAQ,MAAM;IAChC,OAAO,CACLU,KAAA,EACAC,IAAA,EACAC,OAAA,KACG;MACH,OAAOL,MAAA,CAAOM,UAAA,CAAWH,KAAA,EAAOC,IAAA,EAAM;QAAEC;MAAQ,CAAC;IACnD;EACF,GAAG,CAACL,MAAM,CAAC;EACX,OAAOO,gBAAA,CAAiBR,OAAA,EAASG,WAAW;AAC9C;AAKO,gBAASK,iBACdR,OAAA,EACAG,WAAA,EACyC;EACzC,MAAM,CAACM,QAAQ,IAAId,QAAA,CAAS,MAAM,IAAIE,eAAA,CAAgBM,WAAW,CAAC;EAElE,IAAIM,QAAA,CAASN,WAAA,KAAgBA,WAAA,EAAa;IACxCM,QAAA,CAASC,cAAA,CAAeP,WAAW;EACrC;EAGAV,SAAA,CAAU,MAAM,MAAMgB,QAAA,CAASE,OAAA,CAAQ,GAAG,CAACF,QAAQ,CAAC;EAEpD,MAAMG,YAAA,GAAelB,OAAA,CACnB,OAAO;IACLmB,eAAA,EAAiBA,CAAA,KAAM;MACrB,OAAOJ,QAAA,CAASK,eAAA,CAAgBd,OAAO;IACzC;IACAe,SAAA,EAAYC,QAAA,IAAyB;MACnCP,QAAA,CAASQ,UAAA,CAAWjB,OAAO;MAC3B,OAAOS,QAAA,CAASM,SAAA,CAAUC,QAAQ;IACpC;EACF,IACA,CAACP,QAAA,EAAUT,OAAO,CACpB;EAEA,OAAOF,eAAA,CAAgBc,YAAY;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}