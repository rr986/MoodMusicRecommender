{"ast":null,"code":"\"use strict\";\n\nimport { ConvexError } from \"../../values/errors.js\";\nimport { jsonToConvex } from \"../../values/value.js\";\nexport function performSyscall(op, arg) {\n  if (typeof Convex === \"undefined\" || Convex.syscall === void 0) {\n    throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n  }\n  const resultStr = Convex.syscall(op, JSON.stringify(arg));\n  return JSON.parse(resultStr);\n}\nexport async function performAsyncSyscall(op, arg) {\n  if (typeof Convex === \"undefined\" || Convex.asyncSyscall === void 0) {\n    throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n  }\n  let resultStr;\n  try {\n    resultStr = await Convex.asyncSyscall(op, JSON.stringify(arg));\n  } catch (e) {\n    if (e.data !== void 0) {\n      const rethrown = new ConvexError(e.message);\n      rethrown.data = jsonToConvex(e.data);\n      throw rethrown;\n    }\n    throw new Error(e.message);\n  }\n  return JSON.parse(resultStr);\n}\nexport function performJsSyscall(op, arg) {\n  if (typeof Convex === \"undefined\" || Convex.jsSyscall === void 0) {\n    throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n  }\n  return Convex.jsSyscall(op, arg);\n}","map":{"version":3,"names":["ConvexError","jsonToConvex","performSyscall","op","arg","Convex","syscall","Error","resultStr","JSON","stringify","parse","performAsyncSyscall","asyncSyscall","e","data","rethrown","message","performJsSyscall","jsSyscall"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/server/impl/syscall.ts"],"sourcesContent":["import { ConvexError } from \"../../values/errors.js\";\nimport { jsonToConvex } from \"../../values/value.js\";\n\ndeclare const Convex: {\n  syscall: (op: string, jsonArgs: string) => string;\n  asyncSyscall: (op: string, jsonArgs: string) => Promise<string>;\n  jsSyscall: (op: string, args: Record<string, any>) => any;\n};\n/**\n * Perform a syscall, taking in a JSON-encodable object as an argument, serializing with\n * JSON.stringify, calling into Rust, and then parsing the response as a JSON-encodable\n * value. If one of your arguments is a Convex value, you must call `convexToJson` on it\n * before passing it to this function, and if the return value has a Convex value, you're\n * also responsible for calling `jsonToConvex`: This layer only deals in JSON.\n */\n\nexport function performSyscall(op: string, arg: Record<string, any>): any {\n  if (typeof Convex === \"undefined\" || Convex.syscall === undefined) {\n    throw new Error(\n      \"The Convex database and auth objects are being used outside of a Convex backend. \" +\n        \"Did you mean to use `useQuery` or `useMutation` to call a Convex function?\",\n    );\n  }\n  const resultStr = Convex.syscall(op, JSON.stringify(arg));\n  return JSON.parse(resultStr);\n}\n\nexport async function performAsyncSyscall(\n  op: string,\n  arg: Record<string, any>,\n): Promise<any> {\n  if (typeof Convex === \"undefined\" || Convex.asyncSyscall === undefined) {\n    throw new Error(\n      \"The Convex database and auth objects are being used outside of a Convex backend. \" +\n        \"Did you mean to use `useQuery` or `useMutation` to call a Convex function?\",\n    );\n  }\n  let resultStr;\n  try {\n    resultStr = await Convex.asyncSyscall(op, JSON.stringify(arg));\n  } catch (e: any) {\n    // Rethrow the exception to attach stack trace starting from here.\n    // If the error came from JS it will include its own stack trace in the message.\n    // If it came from Rust it won't.\n\n    // This only happens if we're propagating ConvexErrors\n    if (e.data !== undefined) {\n      const rethrown = new ConvexError(e.message);\n      rethrown.data = jsonToConvex(e.data);\n      throw rethrown;\n    }\n    throw new Error(e.message);\n  }\n  return JSON.parse(resultStr);\n}\n\n/**\n * Call into a \"JS\" syscall. Like `performSyscall`, this calls a dynamically linked\n * function set up in the Convex function execution. Unlike `performSyscall`, the\n * arguments do not need to be JSON-encodable and neither does the return value.\n *\n * @param op\n * @param arg\n * @returns\n */\nexport function performJsSyscall(op: string, arg: Record<string, any>): any {\n  if (typeof Convex === \"undefined\" || Convex.jsSyscall === undefined) {\n    throw new Error(\n      \"The Convex database and auth objects are being used outside of a Convex backend. \" +\n        \"Did you mean to use `useQuery` or `useMutation` to call a Convex function?\",\n    );\n  }\n  return Convex.jsSyscall(op, arg);\n}\n"],"mappings":";;AAAA,SAASA,WAAA,QAAmB;AAC5B,SAASC,YAAA,QAAoB;AAetB,gBAASC,eAAeC,EAAA,EAAYC,GAAA,EAA+B;EACxE,IAAI,OAAOC,MAAA,KAAW,eAAeA,MAAA,CAAOC,OAAA,KAAY,QAAW;IACjE,MAAM,IAAIC,KAAA,CACR,6JAEF;EACF;EACA,MAAMC,SAAA,GAAYH,MAAA,CAAOC,OAAA,CAAQH,EAAA,EAAIM,IAAA,CAAKC,SAAA,CAAUN,GAAG,CAAC;EACxD,OAAOK,IAAA,CAAKE,KAAA,CAAMH,SAAS;AAC7B;AAEA,sBAAsBI,oBACpBT,EAAA,EACAC,GAAA,EACc;EACd,IAAI,OAAOC,MAAA,KAAW,eAAeA,MAAA,CAAOQ,YAAA,KAAiB,QAAW;IACtE,MAAM,IAAIN,KAAA,CACR,6JAEF;EACF;EACA,IAAIC,SAAA;EACJ,IAAI;IACFA,SAAA,GAAY,MAAMH,MAAA,CAAOQ,YAAA,CAAaV,EAAA,EAAIM,IAAA,CAAKC,SAAA,CAAUN,GAAG,CAAC;EAC/D,SAASU,CAAA,EAAP;IAMA,IAAIA,CAAA,CAAEC,IAAA,KAAS,QAAW;MACxB,MAAMC,QAAA,GAAW,IAAIhB,WAAA,CAAYc,CAAA,CAAEG,OAAO;MAC1CD,QAAA,CAASD,IAAA,GAAOd,YAAA,CAAaa,CAAA,CAAEC,IAAI;MACnC,MAAMC,QAAA;IACR;IACA,MAAM,IAAIT,KAAA,CAAMO,CAAA,CAAEG,OAAO;EAC3B;EACA,OAAOR,IAAA,CAAKE,KAAA,CAAMH,SAAS;AAC7B;AAWO,gBAASU,iBAAiBf,EAAA,EAAYC,GAAA,EAA+B;EAC1E,IAAI,OAAOC,MAAA,KAAW,eAAeA,MAAA,CAAOc,SAAA,KAAc,QAAW;IACnE,MAAM,IAAIZ,KAAA,CACR,6JAEF;EACF;EACA,OAAOF,MAAA,CAAOc,SAAA,CAAUhB,EAAA,EAAIC,GAAG;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}