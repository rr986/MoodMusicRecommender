{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { convexToJson } from \"../../values/index.js\";\nimport { canonicalizeUdfPath, serializePathAndArgs } from \"./udf_path_utils.js\";\nexport class LocalSyncState {\n  constructor() {\n    __publicField(this, \"nextQueryId\");\n    __publicField(this, \"querySetVersion\");\n    __publicField(this, \"querySet\");\n    __publicField(this, \"queryIdToToken\");\n    __publicField(this, \"identityVersion\");\n    __publicField(this, \"auth\");\n    __publicField(this, \"outstandingQueriesOlderThanRestart\");\n    __publicField(this, \"outstandingAuthOlderThanRestart\");\n    __publicField(this, \"paused\");\n    __publicField(this, \"pendingQuerySetModifications\");\n    this.nextQueryId = 0;\n    this.querySetVersion = 0;\n    this.identityVersion = 0;\n    this.querySet = /* @__PURE__ */new Map();\n    this.queryIdToToken = /* @__PURE__ */new Map();\n    this.outstandingQueriesOlderThanRestart = /* @__PURE__ */new Set();\n    this.outstandingAuthOlderThanRestart = false;\n    this.paused = false;\n    this.pendingQuerySetModifications = /* @__PURE__ */new Map();\n  }\n  hasSyncedPastLastReconnect() {\n    return this.outstandingQueriesOlderThanRestart.size === 0 && !this.outstandingAuthOlderThanRestart;\n  }\n  markAuthCompletion() {\n    this.outstandingAuthOlderThanRestart = false;\n  }\n  subscribe(udfPath, args, journal, componentPath) {\n    const canonicalizedUdfPath = canonicalizeUdfPath(udfPath);\n    const queryToken = serializePathAndArgs(canonicalizedUdfPath, args);\n    const existingEntry = this.querySet.get(queryToken);\n    if (existingEntry !== void 0) {\n      existingEntry.numSubscribers += 1;\n      return {\n        queryToken,\n        modification: null,\n        unsubscribe: () => this.removeSubscriber(queryToken)\n      };\n    } else {\n      const queryId = this.nextQueryId++;\n      const query = {\n        id: queryId,\n        canonicalizedUdfPath,\n        args,\n        numSubscribers: 1,\n        journal\n      };\n      this.querySet.set(queryToken, query);\n      this.queryIdToToken.set(queryId, queryToken);\n      const baseVersion = this.querySetVersion;\n      const newVersion = this.querySetVersion + 1;\n      const add = {\n        type: \"Add\",\n        queryId,\n        udfPath: canonicalizedUdfPath,\n        args: [convexToJson(args)],\n        journal,\n        componentPath\n      };\n      if (this.paused) {\n        this.pendingQuerySetModifications.set(queryId, add);\n      } else {\n        this.querySetVersion = newVersion;\n      }\n      const modification = {\n        type: \"ModifyQuerySet\",\n        baseVersion,\n        newVersion,\n        modifications: [add]\n      };\n      return {\n        queryToken,\n        modification,\n        unsubscribe: () => this.removeSubscriber(queryToken)\n      };\n    }\n  }\n  transition(transition) {\n    for (const modification of transition.modifications) {\n      switch (modification.type) {\n        case \"QueryUpdated\":\n        case \"QueryFailed\":\n          {\n            this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n            const journal = modification.journal;\n            if (journal !== void 0) {\n              const queryToken = this.queryIdToToken.get(modification.queryId);\n              if (queryToken !== void 0) {\n                this.querySet.get(queryToken).journal = journal;\n              }\n            }\n            break;\n          }\n        case \"QueryRemoved\":\n          {\n            this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n            break;\n          }\n        default:\n          {\n            const _ = modification;\n            throw new Error(`Invalid modification ${modification.type}`);\n          }\n      }\n    }\n  }\n  queryId(udfPath, args) {\n    const canonicalizedUdfPath = canonicalizeUdfPath(udfPath);\n    const queryToken = serializePathAndArgs(canonicalizedUdfPath, args);\n    const existingEntry = this.querySet.get(queryToken);\n    if (existingEntry !== void 0) {\n      return existingEntry.id;\n    }\n    return null;\n  }\n  isCurrentOrNewerAuthVersion(version) {\n    return version >= this.identityVersion;\n  }\n  setAuth(value) {\n    this.auth = {\n      tokenType: \"User\",\n      value\n    };\n    const baseVersion = this.identityVersion;\n    if (!this.paused) {\n      this.identityVersion = baseVersion + 1;\n    }\n    return {\n      type: \"Authenticate\",\n      baseVersion,\n      ...this.auth\n    };\n  }\n  setAdminAuth(value, actingAs) {\n    const auth = {\n      tokenType: \"Admin\",\n      value,\n      impersonating: actingAs\n    };\n    this.auth = auth;\n    const baseVersion = this.identityVersion;\n    if (!this.paused) {\n      this.identityVersion = baseVersion + 1;\n    }\n    return {\n      type: \"Authenticate\",\n      baseVersion,\n      ...auth\n    };\n  }\n  clearAuth() {\n    this.auth = void 0;\n    this.markAuthCompletion();\n    const baseVersion = this.identityVersion;\n    if (!this.paused) {\n      this.identityVersion = baseVersion + 1;\n    }\n    return {\n      type: \"Authenticate\",\n      tokenType: \"None\",\n      baseVersion\n    };\n  }\n  hasAuth() {\n    return !!this.auth;\n  }\n  isNewAuth(value) {\n    return this.auth?.value !== value;\n  }\n  queryPath(queryId) {\n    const pathAndArgs = this.queryIdToToken.get(queryId);\n    if (pathAndArgs) {\n      return this.querySet.get(pathAndArgs).canonicalizedUdfPath;\n    }\n    return null;\n  }\n  queryArgs(queryId) {\n    const pathAndArgs = this.queryIdToToken.get(queryId);\n    if (pathAndArgs) {\n      return this.querySet.get(pathAndArgs).args;\n    }\n    return null;\n  }\n  queryToken(queryId) {\n    return this.queryIdToToken.get(queryId) ?? null;\n  }\n  queryJournal(queryToken) {\n    return this.querySet.get(queryToken)?.journal;\n  }\n  restart(oldRemoteQueryResults) {\n    this.unpause();\n    this.outstandingQueriesOlderThanRestart.clear();\n    const modifications = [];\n    for (const localQuery of this.querySet.values()) {\n      const add = {\n        type: \"Add\",\n        queryId: localQuery.id,\n        udfPath: localQuery.canonicalizedUdfPath,\n        args: [convexToJson(localQuery.args)],\n        journal: localQuery.journal\n      };\n      modifications.push(add);\n      if (!oldRemoteQueryResults.has(localQuery.id)) {\n        this.outstandingQueriesOlderThanRestart.add(localQuery.id);\n      }\n    }\n    this.querySetVersion = 1;\n    const querySet = {\n      type: \"ModifyQuerySet\",\n      baseVersion: 0,\n      newVersion: 1,\n      modifications\n    };\n    if (!this.auth) {\n      this.identityVersion = 0;\n      return [querySet, void 0];\n    }\n    this.outstandingAuthOlderThanRestart = true;\n    const authenticate = {\n      type: \"Authenticate\",\n      baseVersion: 0,\n      ...this.auth\n    };\n    this.identityVersion = 1;\n    return [querySet, authenticate];\n  }\n  pause() {\n    this.paused = true;\n  }\n  resume() {\n    const querySet = this.pendingQuerySetModifications.size > 0 ? {\n      type: \"ModifyQuerySet\",\n      baseVersion: this.querySetVersion,\n      newVersion: ++this.querySetVersion,\n      modifications: Array.from(this.pendingQuerySetModifications.values())\n    } : void 0;\n    const authenticate = this.auth !== void 0 ? {\n      type: \"Authenticate\",\n      baseVersion: this.identityVersion++,\n      ...this.auth\n    } : void 0;\n    this.unpause();\n    return [querySet, authenticate];\n  }\n  unpause() {\n    this.paused = false;\n    this.pendingQuerySetModifications.clear();\n  }\n  removeSubscriber(queryToken) {\n    const localQuery = this.querySet.get(queryToken);\n    if (localQuery.numSubscribers > 1) {\n      localQuery.numSubscribers -= 1;\n      return null;\n    } else {\n      this.querySet.delete(queryToken);\n      this.queryIdToToken.delete(localQuery.id);\n      this.outstandingQueriesOlderThanRestart.delete(localQuery.id);\n      const baseVersion = this.querySetVersion;\n      const newVersion = this.querySetVersion + 1;\n      const remove = {\n        type: \"Remove\",\n        queryId: localQuery.id\n      };\n      if (this.paused) {\n        if (this.pendingQuerySetModifications.has(localQuery.id)) {\n          this.pendingQuerySetModifications.delete(localQuery.id);\n        } else {\n          this.pendingQuerySetModifications.set(localQuery.id, remove);\n        }\n      } else {\n        this.querySetVersion = newVersion;\n      }\n      return {\n        type: \"ModifyQuerySet\",\n        baseVersion,\n        newVersion,\n        modifications: [remove]\n      };\n    }\n  }\n}","map":{"version":3,"names":["convexToJson","canonicalizeUdfPath","serializePathAndArgs","LocalSyncState","constructor","__publicField","nextQueryId","querySetVersion","identityVersion","querySet","Map","queryIdToToken","outstandingQueriesOlderThanRestart","Set","outstandingAuthOlderThanRestart","paused","pendingQuerySetModifications","hasSyncedPastLastReconnect","size","markAuthCompletion","subscribe","udfPath","args","journal","componentPath","canonicalizedUdfPath","queryToken","existingEntry","get","numSubscribers","modification","unsubscribe","removeSubscriber","queryId","query","id","set","baseVersion","newVersion","add","type","modifications","transition","delete","_","Error","isCurrentOrNewerAuthVersion","version","setAuth","value","auth","tokenType","setAdminAuth","actingAs","impersonating","clearAuth","hasAuth","isNewAuth","queryPath","pathAndArgs","queryArgs","queryJournal","restart","oldRemoteQueryResults","unpause","clear","localQuery","values","push","has","authenticate","pause","resume","Array","from","remove"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/browser/sync/local_state.ts"],"sourcesContent":["import { convexToJson, Value } from \"../../values/index.js\";\nimport {\n  AddQuery,\n  RemoveQuery,\n  QueryId,\n  QuerySetModification,\n  QuerySetVersion,\n  IdentityVersion,\n  Authenticate,\n  QueryJournal,\n  Transition,\n  AdminAuthentication,\n  UserIdentityAttributes,\n} from \"./protocol.js\";\nimport {\n  canonicalizeUdfPath,\n  QueryToken,\n  serializePathAndArgs,\n} from \"./udf_path_utils.js\";\n\ntype LocalQuery = {\n  id: QueryId;\n  canonicalizedUdfPath: string;\n  args: Record<string, Value>;\n  numSubscribers: number;\n  journal?: QueryJournal;\n};\n\nexport class LocalSyncState {\n  private nextQueryId: QueryId;\n  private querySetVersion: QuerySetVersion;\n  private readonly querySet: Map<QueryToken, LocalQuery>;\n  private readonly queryIdToToken: Map<QueryId, QueryToken>;\n  private identityVersion: IdentityVersion;\n  private auth?: {\n    tokenType: \"Admin\" | \"User\";\n    value: string;\n    impersonating?: UserIdentityAttributes;\n  };\n  private readonly outstandingQueriesOlderThanRestart: Set<QueryId>;\n  private outstandingAuthOlderThanRestart: boolean;\n  private paused: boolean;\n  private pendingQuerySetModifications: Map<QueryId, AddQuery | RemoveQuery>;\n\n  constructor() {\n    this.nextQueryId = 0;\n    this.querySetVersion = 0;\n    this.identityVersion = 0;\n    this.querySet = new Map();\n    this.queryIdToToken = new Map();\n    this.outstandingQueriesOlderThanRestart = new Set();\n    this.outstandingAuthOlderThanRestart = false;\n    this.paused = false;\n    this.pendingQuerySetModifications = new Map();\n  }\n\n  hasSyncedPastLastReconnect(): boolean {\n    return (\n      this.outstandingQueriesOlderThanRestart.size === 0 &&\n      !this.outstandingAuthOlderThanRestart\n    );\n  }\n\n  markAuthCompletion() {\n    this.outstandingAuthOlderThanRestart = false;\n  }\n\n  subscribe(\n    udfPath: string,\n    args: Record<string, Value>,\n    journal?: QueryJournal,\n    componentPath?: string,\n  ): {\n    queryToken: QueryToken;\n    modification: QuerySetModification | null;\n    unsubscribe: () => QuerySetModification | null;\n  } {\n    const canonicalizedUdfPath = canonicalizeUdfPath(udfPath);\n    const queryToken = serializePathAndArgs(canonicalizedUdfPath, args);\n\n    const existingEntry = this.querySet.get(queryToken);\n\n    if (existingEntry !== undefined) {\n      existingEntry.numSubscribers += 1;\n      return {\n        queryToken,\n        modification: null,\n        unsubscribe: () => this.removeSubscriber(queryToken),\n      };\n    } else {\n      const queryId = this.nextQueryId++;\n      const query: LocalQuery = {\n        id: queryId,\n        canonicalizedUdfPath,\n        args,\n        numSubscribers: 1,\n        journal,\n      };\n      this.querySet.set(queryToken, query);\n      this.queryIdToToken.set(queryId, queryToken);\n\n      const baseVersion = this.querySetVersion;\n      const newVersion = this.querySetVersion + 1;\n\n      const add: AddQuery = {\n        type: \"Add\",\n        queryId,\n        udfPath: canonicalizedUdfPath,\n        args: [convexToJson(args)],\n        journal,\n        componentPath,\n      };\n\n      if (this.paused) {\n        this.pendingQuerySetModifications.set(queryId, add);\n      } else {\n        this.querySetVersion = newVersion;\n      }\n\n      const modification: QuerySetModification = {\n        type: \"ModifyQuerySet\",\n        baseVersion,\n        newVersion,\n        modifications: [add],\n      };\n      return {\n        queryToken,\n        modification,\n        unsubscribe: () => this.removeSubscriber(queryToken),\n      };\n    }\n  }\n\n  transition(transition: Transition) {\n    for (const modification of transition.modifications) {\n      switch (modification.type) {\n        case \"QueryUpdated\":\n        case \"QueryFailed\": {\n          this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n          const journal = modification.journal;\n          if (journal !== undefined) {\n            const queryToken = this.queryIdToToken.get(modification.queryId);\n            // We may have already unsubscribed to this query by the time the server\n            // sends us the journal. If so, just ignore it.\n            if (queryToken !== undefined) {\n              this.querySet.get(queryToken)!.journal = journal;\n            }\n          }\n\n          break;\n        }\n        case \"QueryRemoved\": {\n          this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n          break;\n        }\n        default: {\n          // Enforce that the switch-case is exhaustive.\n          const _: never = modification;\n          throw new Error(`Invalid modification ${(modification as any).type}`);\n        }\n      }\n    }\n  }\n\n  queryId(udfPath: string, args: Record<string, Value>): QueryId | null {\n    const canonicalizedUdfPath = canonicalizeUdfPath(udfPath);\n    const queryToken = serializePathAndArgs(canonicalizedUdfPath, args);\n    const existingEntry = this.querySet.get(queryToken);\n    if (existingEntry !== undefined) {\n      return existingEntry.id;\n    }\n    return null;\n  }\n\n  isCurrentOrNewerAuthVersion(version: IdentityVersion): boolean {\n    return version >= this.identityVersion;\n  }\n\n  setAuth(value: string): Authenticate {\n    this.auth = {\n      tokenType: \"User\",\n      value: value,\n    };\n    const baseVersion = this.identityVersion;\n    if (!this.paused) {\n      this.identityVersion = baseVersion + 1;\n    }\n    return {\n      type: \"Authenticate\",\n      baseVersion: baseVersion,\n      ...this.auth,\n    };\n  }\n\n  setAdminAuth(\n    value: string,\n    actingAs?: UserIdentityAttributes,\n  ): AdminAuthentication {\n    const auth: typeof this.auth & {\n      tokenType: \"Admin\";\n    } = {\n      tokenType: \"Admin\",\n      value,\n      impersonating: actingAs,\n    };\n    this.auth = auth;\n    const baseVersion = this.identityVersion;\n    if (!this.paused) {\n      this.identityVersion = baseVersion + 1;\n    }\n    return {\n      type: \"Authenticate\",\n      baseVersion: baseVersion,\n      ...auth,\n    };\n  }\n\n  clearAuth(): Authenticate {\n    this.auth = undefined;\n    this.markAuthCompletion();\n    const baseVersion = this.identityVersion;\n    if (!this.paused) {\n      this.identityVersion = baseVersion + 1;\n    }\n    return {\n      type: \"Authenticate\",\n      tokenType: \"None\",\n      baseVersion: baseVersion,\n    };\n  }\n\n  hasAuth(): boolean {\n    return !!this.auth;\n  }\n\n  isNewAuth(value: string): boolean {\n    return this.auth?.value !== value;\n  }\n\n  queryPath(queryId: QueryId): string | null {\n    const pathAndArgs = this.queryIdToToken.get(queryId);\n    if (pathAndArgs) {\n      return this.querySet.get(pathAndArgs)!.canonicalizedUdfPath;\n    }\n    return null;\n  }\n\n  queryArgs(queryId: QueryId): Record<string, Value> | null {\n    const pathAndArgs = this.queryIdToToken.get(queryId);\n    if (pathAndArgs) {\n      return this.querySet.get(pathAndArgs)!.args;\n    }\n    return null;\n  }\n\n  queryToken(queryId: QueryId): string | null {\n    return this.queryIdToToken.get(queryId) ?? null;\n  }\n\n  queryJournal(queryToken: QueryToken): QueryJournal | undefined {\n    return this.querySet.get(queryToken)?.journal;\n  }\n\n  restart(\n    oldRemoteQueryResults: Set<QueryId>,\n  ): [QuerySetModification, Authenticate?] {\n    // Restart works whether we are paused or unpaused.\n    // The `this.pendingQuerySetModifications` is not used\n    // when restarting as the AddQuery and RemoveQuery are computed\n    // from scratch, based on the old remote query results, here.\n    this.unpause();\n\n    this.outstandingQueriesOlderThanRestart.clear();\n    const modifications = [];\n    for (const localQuery of this.querySet.values()) {\n      const add: AddQuery = {\n        type: \"Add\",\n        queryId: localQuery.id,\n        udfPath: localQuery.canonicalizedUdfPath,\n        args: [convexToJson(localQuery.args)],\n        journal: localQuery.journal,\n      };\n      modifications.push(add);\n\n      if (!oldRemoteQueryResults.has(localQuery.id)) {\n        this.outstandingQueriesOlderThanRestart.add(localQuery.id);\n      }\n    }\n    this.querySetVersion = 1;\n    const querySet: QuerySetModification = {\n      type: \"ModifyQuerySet\",\n      baseVersion: 0,\n      newVersion: 1,\n      modifications,\n    };\n    // If there's no auth, no need to send an update as the server will also start with an unknown identity.\n    if (!this.auth) {\n      this.identityVersion = 0;\n      return [querySet, undefined];\n    }\n    this.outstandingAuthOlderThanRestart = true;\n    const authenticate: Authenticate = {\n      type: \"Authenticate\",\n      baseVersion: 0,\n      ...this.auth,\n    };\n    this.identityVersion = 1;\n    return [querySet, authenticate];\n  }\n\n  pause() {\n    this.paused = true;\n  }\n\n  resume(): [QuerySetModification?, Authenticate?] {\n    const querySet: QuerySetModification | undefined =\n      this.pendingQuerySetModifications.size > 0\n        ? {\n            type: \"ModifyQuerySet\",\n            baseVersion: this.querySetVersion,\n            newVersion: ++this.querySetVersion,\n            modifications: Array.from(\n              this.pendingQuerySetModifications.values(),\n            ),\n          }\n        : undefined;\n    const authenticate: Authenticate | undefined =\n      this.auth !== undefined\n        ? {\n            type: \"Authenticate\",\n            baseVersion: this.identityVersion++,\n            ...this.auth,\n          }\n        : undefined;\n\n    this.unpause();\n\n    return [querySet, authenticate];\n  }\n\n  private unpause() {\n    this.paused = false;\n    this.pendingQuerySetModifications.clear();\n  }\n\n  private removeSubscriber(\n    queryToken: QueryToken,\n  ): QuerySetModification | null {\n    const localQuery = this.querySet.get(queryToken)!;\n\n    if (localQuery.numSubscribers > 1) {\n      localQuery.numSubscribers -= 1;\n      return null;\n    } else {\n      this.querySet.delete(queryToken);\n      this.queryIdToToken.delete(localQuery.id);\n      this.outstandingQueriesOlderThanRestart.delete(localQuery.id);\n      const baseVersion = this.querySetVersion;\n      const newVersion = this.querySetVersion + 1;\n      const remove: RemoveQuery = {\n        type: \"Remove\",\n        queryId: localQuery.id,\n      };\n      if (this.paused) {\n        if (this.pendingQuerySetModifications.has(localQuery.id)) {\n          this.pendingQuerySetModifications.delete(localQuery.id);\n        } else {\n          this.pendingQuerySetModifications.set(localQuery.id, remove);\n        }\n      } else {\n        this.querySetVersion = newVersion;\n      }\n      return {\n        type: \"ModifyQuerySet\",\n        baseVersion,\n        newVersion,\n        modifications: [remove],\n      };\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}