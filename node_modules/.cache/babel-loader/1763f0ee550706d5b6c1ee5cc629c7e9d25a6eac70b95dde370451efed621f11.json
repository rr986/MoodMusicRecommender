{"ast":null,"code":"\"use strict\";\n\nexport function parseArgs(args) {\n  if (args === void 0) {\n    return {};\n  }\n  if (!isSimpleObject(args)) {\n    throw new Error(`The arguments to a Convex function must be an object. Received: ${args}`);\n  }\n  return args;\n}\nexport function validateDeploymentUrl(deploymentUrl) {\n  if (typeof deploymentUrl === \"undefined\") {\n    throw new Error(`Client created with undefined deployment address. If you used an environment variable, check that it's set.`);\n  }\n  if (typeof deploymentUrl !== \"string\") {\n    throw new Error(`Invalid deployment address: found ${deploymentUrl}\".`);\n  }\n  if (!(deploymentUrl.startsWith(\"http:\") || deploymentUrl.startsWith(\"https:\"))) {\n    throw new Error(`Invalid deployment address: Must start with \"https://\" or \"http://\". Found \"${deploymentUrl}\".`);\n  }\n  try {\n    new URL(deploymentUrl);\n  } catch (err) {\n    throw new Error(`Invalid deployment address: \"${deploymentUrl}\" is not a valid URL. If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n  }\n  if (deploymentUrl.endsWith(\".convex.site\")) {\n    throw new Error(`Invalid deployment address: \"${deploymentUrl}\" ends with .convex.site, which is used for HTTP Actions. Convex deployment URLs typically end with .convex.cloud? If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n  }\n}\nexport function isSimpleObject(value) {\n  const isObject = typeof value === \"object\";\n  const prototype = Object.getPrototypeOf(value);\n  const isSimple = prototype === null || prototype === Object.prototype ||\n  // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous\n  // conditions but are still simple objects.\n  prototype?.constructor?.name === \"Object\";\n  return isObject && isSimple;\n}","map":{"version":3,"names":["parseArgs","args","isSimpleObject","Error","validateDeploymentUrl","deploymentUrl","startsWith","URL","err","endsWith","value","isObject","prototype","Object","getPrototypeOf","isSimple","constructor","name"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/common/index.ts"],"sourcesContent":["import type { Value } from \"../values/value.js\";\n\n/**\n * Validate that the arguments to a Convex function are an object, defaulting\n * `undefined` to `{}`.\n */\nexport function parseArgs(\n  args: Record<string, Value> | undefined,\n): Record<string, Value> {\n  if (args === undefined) {\n    return {};\n  }\n  if (!isSimpleObject(args)) {\n    throw new Error(\n      `The arguments to a Convex function must be an object. Received: ${\n        args as any\n      }`,\n    );\n  }\n  return args;\n}\n\nexport function validateDeploymentUrl(deploymentUrl: string) {\n  // Don't use things like `new URL(deploymentUrl).hostname` since these aren't\n  // supported by React Native's JS environment\n  if (typeof deploymentUrl === \"undefined\") {\n    throw new Error(\n      `Client created with undefined deployment address. If you used an environment variable, check that it's set.`,\n    );\n  }\n  if (typeof deploymentUrl !== \"string\") {\n    throw new Error(\n      `Invalid deployment address: found ${deploymentUrl as any}\".`,\n    );\n  }\n  if (\n    !(deploymentUrl.startsWith(\"http:\") || deploymentUrl.startsWith(\"https:\"))\n  ) {\n    throw new Error(\n      `Invalid deployment address: Must start with \"https://\" or \"http://\". Found \"${deploymentUrl}\".`,\n    );\n  }\n\n  // Most clients should connect to \".convex.cloud\". But we also support localhost and\n  // custom custom. We validate the deployment url is a valid url, which is the most\n  // common failure pattern.\n  try {\n    new URL(deploymentUrl);\n  } catch (err) {\n    throw new Error(\n      `Invalid deployment address: \"${deploymentUrl}\" is not a valid URL. If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`,\n    );\n  }\n\n  // If a user uses .convex.site, this is very likely incorrect.\n  if (deploymentUrl.endsWith(\".convex.site\")) {\n    throw new Error(\n      `Invalid deployment address: \"${deploymentUrl}\" ends with .convex.site, which is used for HTTP Actions. Convex deployment URLs typically end with .convex.cloud? If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`,\n    );\n  }\n}\n\n/**\n * Check whether a value is a plain old JavaScript object.\n */\nexport function isSimpleObject(value: unknown) {\n  const isObject = typeof value === \"object\";\n  const prototype = Object.getPrototypeOf(value);\n  const isSimple =\n    prototype === null ||\n    prototype === Object.prototype ||\n    // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous\n    // conditions but are still simple objects.\n    prototype?.constructor?.name === \"Object\";\n  return isObject && isSimple;\n}\n"],"mappings":";;AAMO,gBAASA,UACdC,IAAA,EACuB;EACvB,IAAIA,IAAA,KAAS,QAAW;IACtB,OAAO,CAAC;EACV;EACA,IAAI,CAACC,cAAA,CAAeD,IAAI,GAAG;IACzB,MAAM,IAAIE,KAAA,CACR,mEACEF,IAAA,EAEJ;EACF;EACA,OAAOA,IAAA;AACT;AAEO,gBAASG,sBAAsBC,aAAA,EAAuB;EAG3D,IAAI,OAAOA,aAAA,KAAkB,aAAa;IACxC,MAAM,IAAIF,KAAA,CACR,6GACF;EACF;EACA,IAAI,OAAOE,aAAA,KAAkB,UAAU;IACrC,MAAM,IAAIF,KAAA,CACR,qCAAqCE,aAAA,IACvC;EACF;EACA,IACE,EAAEA,aAAA,CAAcC,UAAA,CAAW,OAAO,KAAKD,aAAA,CAAcC,UAAA,CAAW,QAAQ,IACxE;IACA,MAAM,IAAIH,KAAA,CACR,+EAA+EE,aAAA,IACjF;EACF;EAKA,IAAI;IACF,IAAIE,GAAA,CAAIF,aAAa;EACvB,SAASG,GAAA,EAAP;IACA,MAAM,IAAIL,KAAA,CACR,gCAAgCE,aAAA,2HAClC;EACF;EAGA,IAAIA,aAAA,CAAcI,QAAA,CAAS,cAAc,GAAG;IAC1C,MAAM,IAAIN,KAAA,CACR,gCAAgCE,aAAA,wNAClC;EACF;AACF;AAKO,gBAASH,eAAeQ,KAAA,EAAgB;EAC7C,MAAMC,QAAA,GAAW,OAAOD,KAAA,KAAU;EAClC,MAAME,SAAA,GAAYC,MAAA,CAAOC,cAAA,CAAeJ,KAAK;EAC7C,MAAMK,QAAA,GACJH,SAAA,KAAc,QACdA,SAAA,KAAcC,MAAA,CAAOD,SAAA;EAAA;EAAA;EAGrBA,SAAA,EAAWI,WAAA,EAAaC,IAAA,KAAS;EACnC,OAAON,QAAA,IAAYI,QAAA;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}