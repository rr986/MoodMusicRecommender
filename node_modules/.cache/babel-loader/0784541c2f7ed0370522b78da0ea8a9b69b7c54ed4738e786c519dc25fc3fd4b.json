{"ast":null,"code":"\"use strict\";\n\nconst markNames = [\"convexClientConstructed\", \"convexWebSocketOpen\", \"convexFirstMessageReceived\"];\nexport function mark(name, sessionId) {\n  const detail = {\n    sessionId\n  };\n  if (typeof performance === \"undefined\" || !performance.mark) return;\n  performance.mark(name, {\n    detail\n  });\n}\nfunction performanceMarkToJson(mark2) {\n  let name = mark2.name.slice(\"convex\".length);\n  name = name.charAt(0).toLowerCase() + name.slice(1);\n  return {\n    name,\n    startTime: mark2.startTime\n  };\n}\nexport function getMarksReport(sessionId) {\n  if (typeof performance === \"undefined\" || !performance.getEntriesByName) {\n    return [];\n  }\n  const allMarks = [];\n  for (const name of markNames) {\n    const marks = performance.getEntriesByName(name).filter(entry => entry.entryType === \"mark\").filter(mark2 => mark2.detail.sessionId === sessionId);\n    allMarks.push(...marks);\n  }\n  return allMarks.map(performanceMarkToJson);\n}","map":{"version":3,"names":["markNames","mark","name","sessionId","detail","performance","performanceMarkToJson","mark2","slice","length","charAt","toLowerCase","startTime","getMarksReport","getEntriesByName","allMarks","marks","filter","entry","entryType","push","map"],"sources":["/Users/Ragini/Movies/MoodMusicRecommender/node_modules/convex/src/browser/sync/metrics.ts"],"sourcesContent":["// Marks share a global namespace with other developer code.\nconst markNames = [\n  \"convexClientConstructed\",\n  \"convexWebSocketOpen\",\n  \"convexFirstMessageReceived\",\n] as const;\nexport type MarkName = (typeof markNames)[number];\n\n// Mark details are not reported to the server.\ntype MarkDetail = {\n  sessionId: string;\n};\n\n// `PerformanceMark`s are efficient and show up in browser's performance\n// timeline. They can be cleared with `performance.clearMarks()`.\n// This is a memory leak, but a worthwhile one: automatic\n// cleanup would make in-browser debugging more difficult.\nexport function mark(name: MarkName, sessionId: string) {\n  const detail: MarkDetail = { sessionId };\n  // `performance` APIs exists in browsers, Node.js, Deno, and more but it\n  // is not required by the Convex client.\n  if (typeof performance === \"undefined\" || !performance.mark) return;\n  performance.mark(name, { detail });\n}\n\n// `PerfomanceMark` has a built-in toJSON() but the return type varies\n// between implementations, e.g. Node.js returns details but Chrome does not.\nfunction performanceMarkToJson(mark: PerformanceMark): MarkJson {\n  // Remove \"convex\" prefix\n  let name = mark.name.slice(\"convex\".length);\n  // lowercase the first letter\n  name = name.charAt(0).toLowerCase() + name.slice(1);\n  return {\n    name,\n    startTime: mark.startTime,\n  };\n}\n\n// Similar to the return type of `PerformanceMark.toJson()`.\nexport type MarkJson = {\n  name: string;\n  // `startTime` is in milliseconds since the time origin like `performance.now()`.\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#the_time_origin\n  startTime: number;\n};\n\nexport function getMarksReport(sessionId: string): MarkJson[] {\n  if (typeof performance === \"undefined\" || !performance.getEntriesByName) {\n    return [];\n  }\n  const allMarks: PerformanceMark[] = [];\n  for (const name of markNames) {\n    const marks = (\n      performance\n        .getEntriesByName(name)\n        .filter((entry) => entry.entryType === \"mark\") as PerformanceMark[]\n    ).filter((mark) => mark.detail.sessionId === sessionId);\n    allMarks.push(...marks);\n  }\n  return allMarks.map(performanceMarkToJson);\n}\n"],"mappings":";;AACA,MAAMA,SAAA,GAAY,CAChB,2BACA,uBACA,6BACF;AAYO,gBAASC,KAAKC,IAAA,EAAgBC,SAAA,EAAmB;EACtD,MAAMC,MAAA,GAAqB;IAAED;EAAU;EAGvC,IAAI,OAAOE,WAAA,KAAgB,eAAe,CAACA,WAAA,CAAYJ,IAAA,EAAM;EAC7DI,WAAA,CAAYJ,IAAA,CAAKC,IAAA,EAAM;IAAEE;EAAO,CAAC;AACnC;AAIA,SAASE,sBAAsBC,KAAA,EAAiC;EAE9D,IAAIL,IAAA,GAAOK,KAAA,CAAKL,IAAA,CAAKM,KAAA,CAAM,SAASC,MAAM;EAE1CP,IAAA,GAAOA,IAAA,CAAKQ,MAAA,CAAO,CAAC,EAAEC,WAAA,CAAY,IAAIT,IAAA,CAAKM,KAAA,CAAM,CAAC;EAClD,OAAO;IACLN,IAAA;IACAU,SAAA,EAAWL,KAAA,CAAKK;EAClB;AACF;AAUO,gBAASC,eAAeV,SAAA,EAA+B;EAC5D,IAAI,OAAOE,WAAA,KAAgB,eAAe,CAACA,WAAA,CAAYS,gBAAA,EAAkB;IACvE,OAAO,EAAC;EACV;EACA,MAAMC,QAAA,GAA8B,EAAC;EACrC,WAAWb,IAAA,IAAQF,SAAA,EAAW;IAC5B,MAAMgB,KAAA,GACJX,WAAA,CACGS,gBAAA,CAAiBZ,IAAI,EACrBe,MAAA,CAAQC,KAAA,IAAUA,KAAA,CAAMC,SAAA,KAAc,MAAM,EAC/CF,MAAA,CAAQV,KAAA,IAASA,KAAA,CAAKH,MAAA,CAAOD,SAAA,KAAcA,SAAS;IACtDY,QAAA,CAASK,IAAA,CAAK,GAAGJ,KAAK;EACxB;EACA,OAAOD,QAAA,CAASM,GAAA,CAAIf,qBAAqB;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}